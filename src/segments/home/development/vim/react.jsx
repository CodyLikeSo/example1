import React, { useState, useEffect, useRef } from 'react';

// Child component with updated text
const TextContent = () => {
  return (
  <div>
    <p className='text-green-600'># React</p>
    <br />
    <p className='text-green-600'>## –ö–∞–∫ —ç—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ ü§î</p>
    <br />
    <p>React ‚Äî –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —è –Ω–µ –±—ã–ª –æ—á–µ–Ω—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ –ø–æ–Ω—è–ª, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –æ–≤–ª–∞–¥–µ—Ç—å —ç—Ç–∏–º, —á—Ç–æ–±—ã –¥–æ–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã –¥–æ –æ—Å—è–∑–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –Ø –Ω–∞—á–∞–ª –∏–∑—É—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –≤ –∫–æ–Ω–µ—á–Ω–æ–º –∏—Ç–æ–≥–µ –≤—ã–±—Ä–∞–≤ React. –í–º–µ—Å—Ç–µ —Å –∏–∑—É—á–µ–Ω–∏–µ–º React —è –æ—Å–≤–æ–∏–ª HTML, CSS –∏ JavaScript. –í–º–µ—Å—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ CSS —è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª Tailwind –¥–ª—è —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.</p>
    <br />
    <p>–û–¥–Ω–∏–º –∏–∑ –º–æ–∏—Ö –ø–µ—Ä–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞, —Ö–æ—Ç—è —Ä–∞–Ω—å—à–µ –æ–Ω –≤—ã–≥–ª—è–¥–µ–ª —Å–æ–≤—Å–µ–º –∏–Ω–∞—á–µ. –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É —É–≤–µ—Ä–µ–Ω–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∑–Ω–∞—é, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å React –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.</p>
    <br />
    <p className='text-green-600'>## –ú–æ—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</p>
    <br />
    <p>–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª Arch –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–∏–ø—Ç–∞, –Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ <a href="https://github.com/prasanthrangan/hyprodots">Hyprodots</a> –æ—Ç <strong>prasanthrangan</strong> –∏ –¥–æ —Å–∏—Ö –ø–æ—Ä –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é.</p>
  </div>
  );
};

// Main component that calculates and displays line numbers
const ReactInfoComponent = () => {
  const textRef = useRef(null);
  const [lineCount, setLineCount] = useState(1);

  useEffect(() => {
    const calculateLines = () => {
      if (textRef.current) {
        const element = textRef.current;
        const lineHeight = parseFloat(window.getComputedStyle(element).lineHeight);
        const height = element.offsetHeight;
        const newLineCount = Math.round(height / lineHeight);

        // Ensure that the line count is always updated
        if (newLineCount !== lineCount) {
          setLineCount(newLineCount);
        }
      }
    };

    // Use ResizeObserver to observe changes in the text container's size
    const observer = new ResizeObserver(() => {
      calculateLines();
    });

    if (textRef.current) {
      observer.observe(textRef.current);
    }

    // Cleanup observer on component unmount
    return () => {
      if (textRef.current) {
        observer.unobserve(textRef.current);
      }
    };
  }, [lineCount]); // Add lineCount as a dependency to ensure recalculation

  // Create an array of line numbers from 1 to lineCount
  const lineNumbers = Array.from({ length: lineCount }, (_, i) => i + 1);

  return (
    <div className="p-4 w-full">
      <div className="flex">
        {/* Line numbers column */}
        <div className="text-right pr-4 text-gray-700">
          {lineNumbers.map((lineNumber) => (
            <div key={lineNumber} className="leading-[28px]">
              {lineNumber}
            </div>
          ))}
        </div>

        {/* Text column */}
        <div ref={textRef} className="text-lg font-mono">
          <TextContent />
        </div>
      </div>

      <div className="mt-2 text-sm text-green-600">
        Estimated number of lines: {lineCount}
      </div>
    </div>
  );
};

export default ReactInfoComponent;
